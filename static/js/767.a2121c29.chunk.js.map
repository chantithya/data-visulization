{"version":3,"file":"static/js/767.a2121c29.chunk.js","mappings":"kJAgBA,MAIMA,EAAsBA,CAC1BC,EACAC,KAEA,MAAM,SAAEC,EAAQ,aAAEC,EAAY,eAAEC,GAAmBJ,EACnD,OACEC,GACAA,EAAOI,QACPJ,EAAOK,eACPL,EAAOK,cAAcC,cACrBN,EAAOK,cAAcE,aACnBN,GAAYD,EAAOK,cAAcC,iBACjCH,GAAkBH,EAAOK,cAAcG,gBACvCN,GAAgBF,EAAOK,cAAcI,YAAU,EAmB9C,SAASC,EAAoBX,GAClC,MAAM,aACJY,EAAe,UAAS,cACxBC,EAAgB,CAAC,YAAa,YAAW,cACzCC,EAAgB,KAAI,WACpBC,GACEf,GACGgB,EAAcC,IAAmBC,EAAAA,EAAAA,UAA2B,OAC5DC,EAA2BC,IAChCF,EAAAA,EAAAA,UAAuB,OAClBG,EAAiCC,IACtCJ,EAAAA,EAAAA,UAAuB,OACnB,UACJK,EACAC,MAAOC,EAAkB,UACzBC,GC3DG,SAAuBC,GAC5B,MAAOJ,EAAWK,IAAgBV,EAAAA,EAAAA,WAAS,IACpCM,EAAOK,IAAYX,EAAAA,EAAAA,UAAuB,OAC1CQ,EAAWI,IAAgBZ,EAAAA,EAAAA,WAAS,GACrCa,EAASA,KACbH,GAAa,GACbE,GAAa,IAmDf,OAjDAE,EAAAA,EAAAA,YAAW,KACT,IAAKC,SAAU,CACb,MAAMT,EAAQ,IAAIU,MAChB,qEAAqEP,KAGvE,YADAE,EAASL,EAEX,CAGA,MAAMW,EAAcF,SAASG,cAC3B,eAAeT,OAIjB,GAAIQ,GAAaE,QAAQC,OAEvB,YADAP,IAKF,MAAMQ,EAASJ,GAAeF,SAASO,cAAc,UAGhDL,IACHI,EAAOZ,IAAMA,GASfY,EAAOE,iBAAiB,QALCC,KACvBH,EAAOF,QAAQC,OAAS,IACxBP,GAAA,IAKFQ,EAAOE,iBAAiB,SAAUE,IAChCC,QAAQpB,MAAM,yBAA0BG,EAAKgB,GAC7C,MAAMnB,EAAQ,IAAIU,MAChB,+CAA+CP,KAEjDE,EAASL,EAAA,IAINW,GACHF,SAASY,KAAKC,OAAOP,EACvB,GACC,IACI,CACLhB,YACAC,QACAE,YAEJ,CDFMqB,CACF/C,EAAMgD,sBAAwB,4CAoChC,OAjCAhB,EAAAA,EAAAA,YAAW,KACT,IAAKN,EACH,OAEF,MAAMzB,EArCOgD,OAAOhD,OAsCpB,GA7DmBA,IACdA,GAAUA,EAAOI,OA4DjB6C,CAAcjD,GAOfF,EAAoBC,EAAOC,GAC7BgB,EAAgBhB,IAGlBA,EAAOI,OAAO8C,KAAKvC,EAAc,CAC/BwC,SAAUvC,EACVwC,SAAUvC,EACVC,eAEFd,EAAOI,OAAOiD,mBAAkB,KAC9B,IAAKvD,EAAoBC,EAAOC,GAAS,CACvC,MAAMuB,EAAQ,IAAIU,MAChB,kFAIF,OAFAU,QAAQpB,MAAMA,QACdF,EAAmCE,EAErC,CACAP,EAAgBhB,EAAA,SAzBlB,CACE,MAAMuB,EAAQ,IAAIU,MAChB,gFAEFd,EAA6BI,EAE/B,CAoBE,GACD,CAACE,IACG,CACLF,MACEC,GACAN,GACAE,EACFE,YACAtB,OAAQe,EAEZ,CE/GO,MAAMuC,EAAoD,CAE/DC,eAAe,EAEfC,QAAS,CAAC,EACVC,cAAc,EACdC,gBAAiBA,OACjBC,2BAA4B,CAC1BC,QAAS,EACTC,IAAK,GAEPC,UAAW,CAAC,EACZC,mBAAoB,CAAC,EACrBhB,qBAAsB,4CCLXiB,EAAuBjE,IAClC,MAAM,QAAEkE,EAAO,cAAEC,EAAa,OAAEC,GAAWpE,EAC3C,OAAKkE,GAAYC,GAAkBA,GAAeE,OAIhDC,EAAAA,cAAAA,EAAAA,SAAA,KACGH,EACEC,QAAOG,I,IAAC,YAAEC,EAAW,QAAEC,GAASF,EAC/B,OAAOH,GAASA,EAAO,CAAEK,UAASD,eAAiB,IAEpDE,KAAIH,IAAC,YAAEE,GAASF,EACf,OACED,EAAAA,cAAC,OAAIK,IAAKF,EAAQG,iBAAkBC,GAAIJ,EAAQG,kB,KAVjD,IAYH,ECzBR,IAAIE,EAAW,EACR,MAAMC,EAAmBA,KAC9BD,GAAY,EACL,oBAAoBA,KCmBtB,MAAME,EAIX,0BACEC,IAEA,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAoBZ,OAAQa,GAAK,EAAG,CACtD,MAAM,YAAEC,EAAW,QAAE1B,EAAO,qBAAE2B,GAC5BH,EAAoBC,GAAGV,YACrBY,GAAwB,UAAWA,GACrCH,EAAoBC,GAAGT,QAAQY,SAASD,EAA6B,OAEvEH,EAAoBC,GAAGT,QAAQa,WAAW7B,GAC1CwB,EAAoBC,GAAGT,QAAQc,eAAeJ,EAChD,GAMF,6BAAsCK,CACpCP,EACAjF,KAEA,MAAM,OAAEC,GAAWD,EACnB,OAAOiF,EAAoBQ,SAASC,IAClC,MAAM,QAAEjB,EAAO,YAAED,GAAgBkB,GAC3B,cAAEC,EAAgB,IAAOnB,EAC/B,OAAOmB,EAAcjB,KAAKkB,IACxB,MAAM,SAAEC,EAAQ,UAAEC,GAAcF,EAChC,OAAO3F,EAAOK,cAAcyF,OAAOC,YACjCvB,EACAqB,GACA,WAAI,QAAAG,EAAAC,UAAA7B,OAAA8B,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAH,UAAAG,GACFR,EAAS,CACPS,aAAc,KACdC,eAAgB9B,EAChBzE,MAAOA,EACPC,OAAQA,EACRuG,UAAWL,GAEf,MAEF,GACF,EAMJ,uBAAkCtB,IAChC,IAAI4B,EAMJ,OAJEA,EADgB,qBAAP5B,EACG,uBAAuBE,MAEvBF,EAEP4B,CAAA,EAMT,2BAAsCzG,IACpC,MAAM,SAAEE,EAAQ,OAAED,GAAWD,EAC7B,OAAKE,EAIEA,EAASwE,KAAI,CAACD,EAASS,KAC5B,MACEuB,UAAWC,EAAc,YACzBvB,EACA1B,QAASkD,EAAc,qBACvBvB,GACEX,EACEgC,EAAYG,KAAKC,gBAAgBH,GACvC,MAAO,CACLlC,YAAaC,EACbA,QAAS,IAAIxE,EAAOK,cAAcwG,eAAe,CAC/CC,YAAaN,EACbtB,cACA1B,QAASkD,KACNvB,IAEN,IAnBM,IAoBP,EAGJ4B,mBAAsBhH,IACpB,MAAM,aAAEsG,EAAY,eAAEW,GAAmBjH,EACnCiF,EAAsB2B,KAAKM,oBAAoBlH,GACrD,OAAKiF,GAAwBgC,GAAmBX,GAGhDW,EAAeE,KACblC,EAAoBP,KAAIH,IAAC,YAAEE,GAASF,EAAK,OAAAE,CAAA,IACzC6B,GAEFM,KAAKQ,mBAAmBnC,GACjBA,GAPE,IAOF,EC7GX,MAgDaoC,EAAoBrH,IAC/B,MAAOmE,EAAemD,GAhDtBpH,KAEA,MAAOiE,EAAemD,GAAoBC,EAAAA,SAExC,MAaF,MAAO,CAXgBA,EAAAA,SAAc,IAC9BpD,GAAkBjE,EAEhBA,EACJwE,KAAI,CAACF,EAAaU,KACjB,MAAMT,EAA0CN,EAAce,GAC9D,OAAOT,EAAU,CAAED,cAAaC,gBAAY+C,CAAA,IAE7C/B,SAASgC,GAAoBA,EAAiB,CAACA,GAAkB,KAP5B,MAQvC,CAACtD,EAAejE,IAEKoH,EAAiB,EA+BCI,CACxC1H,EAAME,UA7BuByH,EAC/BxD,EACAnE,KAEAuH,EAAAA,WAAgB,KACd,MAAMK,EAAY5C,EAA4BQ,sBAC5CrB,GAAiB,GACjBnE,GAGF,MAAO,KACL4H,EAAUC,SAASC,IACjB9H,EAAMC,OAAOK,cAAcyF,OAAOgC,eAAeD,EAAA,GACjD,CACH,GACA,CAAC3D,EAAenE,GAAO,EAiB1B2H,CAAyBxD,GAAiB,GAAInE,GAiB9C,MAAO,CACLgI,YAAchI,IACZ,MAAME,EAAW8E,EAA4BgD,YAAYhI,GACzDsH,EAAiBpH,GAAUwE,KAAKD,GAAYA,EAAQA,WAAY,OAElEwD,cAjBqB7D,IACrB,MAAM,aAAEkC,EAAY,eAAEW,GAAmBjH,EACzC,OACEuH,EAAAA,cAACtD,EAAA,IACKjE,EACJkE,QAASgE,QAAQ5B,GAAgBW,GACjC9C,cAAeA,EACfC,OAAQA,G,EAWb,EC1FU+D,EAAuB,CAClC,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WCTK,MAAMC,EACX,iCAA2CC,CACzCrI,EACAsI,KAEA,MAAM,mBAAEC,EAAkB,QAAE9E,GAAYzD,EACxC,IAAKuI,EAEH,YADA3F,QAAQpB,MAAM,qCAGhB,MAAMgH,EAAYD,EAAmBE,eACrC,IAAKD,EAAW,OAChB,MAAME,EAAcF,EAAUG,qBAE9B,IAAyB,IADAL,EAAcjE,OAAS,EAChB,OAChC,MAAMuE,EAASxC,MAAMyC,KAAK,CAAExE,OAAQqE,EAAc,IAAKhE,KACrD,CAACoE,EAAW5D,KACV,MAAM6D,EAAWnC,KAAKoC,YAAYR,EAAWtD,EAAI,GACjD,OAAIoD,EAAcW,SAASF,GAxBhB,UA0BAtF,GAAWA,EAAQmF,OACrBnF,EAAQmF,OAAO1D,GAEfiD,EAAqBjD,EAC9B,IAGJqD,EAAmBjD,WAAW,IACzB7B,EACHmF,WAEFL,EAAmBW,MAAM,EAM3B,4BAAqCC,CACnCnJ,EACAoJ,KAKA,MAAOd,EAAee,GAAoBD,GACpC,OAAEnJ,EAAM,mBAAEsI,GAAuBvI,EACvC,GAAKuI,EAIL,OAAOtI,EAAOK,cAAcyF,OAAOC,YACjCuC,EACA,UACA,KACE,MACMe,EADQf,EAAmBgB,WACTC,eAClBhB,EAAYD,EAAmBE,eACrC,GACuB,IAArBa,EAAUjF,QAEW,OAArBiF,EAAU,GAAGG,MACZjB,EAED,OAGF,MAAMkB,EAAcJ,EAAU,GAAGK,OAC3BZ,EAAWnC,KAAKoC,YAAYR,EAAWkB,GAEzCpB,GAAeW,SAASF,GAC1BM,GAAkBO,GAAU,IACvBA,EAAMxF,QAAQyF,GAAUA,IAAUd,OAGvCM,GAAkBO,GAAU,IAAIA,EAAOb,IACzC,IA5BFnG,QAAQpB,MAAM,oCA6Bd,EAOJ,YAAqBsI,UAGnB,MAAM,KACJC,EAAI,SACJC,EAAQ,KACRC,EAAI,QACJC,EAAO,QACPzG,EAAO,UACP0G,EAAS,WACTC,EAAU,eACVC,EAAc,2BACdzG,EAA0B,qBAC1B0G,EAAoB,mBACpB/B,EAAkB,OAClBtI,EAAM,cACNqI,EAAa,aACb5E,EAAY,cACZF,GACExD,EACJ,IAAKuI,EAEH,YADA3F,QAAQpB,MAAM,kDAGhB,IAAIgH,EACA+B,EAAY,KAChB,GAAIP,EAAU,CACZ,MAAMQ,EAAUvK,EAAOK,cAAcmK,iBAAiBT,EAASU,KACzDC,EAAU1K,EAAOK,cAAcmK,iBAAiBT,EAASY,KAC/DL,EAAYtK,EAAOK,cAAc6J,GAAWU,UAAUC,YACpDN,EACAG,EAEJ,CAGInC,EAFAuB,EACEA,aAAgB9J,EAAOK,cAAcyK,UAC3BhB,EACH3D,MAAM4E,QAAQjB,GACX9J,EAAOK,cAAcmK,iBAAiBV,GAEtC,IAAI9J,EAAOK,cAAcyK,UAAUhB,GAExCE,GAAQC,EACLjK,EAAOK,cAAcmK,iBAAiB,CAACP,KAAYD,IACtDI,QCxI6BP,eAC1CmB,EACAZ,GACA,IAAAa,EAAAhF,UAAA7B,OAAA,YAAA6B,UAAA,GAAAA,UAAA,GAMI,CAAC,EAEL,OAAO,IAAIiF,SAAS,CAAAC,EAASC,KAC3B,MAAMxH,EACJqH,EAAUrH,QAAU,WAAWqH,EAAUrH,UAAY,YAEjDyH,EACJJ,EAAUK,MAAQ,OAAOC,mBAAmBN,EAAUK,SAAW,GAE7DzH,EAASoH,EAAUpH,IAAM,QAAQoH,EAAUpH,MAAQ,GACnD2H,EAAWP,EAAUO,MAAQ,UAAUP,EAAUO,QAAU,GAC3DC,EACJR,EAAUQ,aAAe,iBAAiBR,EAAUQ,eAAiB,GAGjEC,EAAmB,GAAGtB,aADFxG,IAAUC,IAAM2H,IAAQH,IAAcI,IAElD,IAAIT,EAAU3K,cAAcsL,MAAMD,GAC1CE,MAAMC,IACNA,EAASC,UACXV,EACE,oBAAoBS,EAASE,gBAAgBF,EAASG,wBAGxDb,EAAQU,EAASrD,eACnB,GACA,GAEN,CDqGyByD,CACjBjM,EACAoK,EACAzG,GAGU3D,EAAOK,cAAcmK,iBAAiB,IAEpD,MAAM/B,EAAcF,EAAUG,qBAExBwD,EAAc/F,MAAMsC,GACvB0D,KAAK,GACL1H,KAAI,CAAC2H,EAAInH,KACR,MAAM6D,EAAWnC,KAAKoC,YAAYR,EAAWtD,GAC7C,OAAIoD,EAAcW,SAASF,GAClB,CACLuD,MAAO9D,EAAU+D,eAAerH,GAChCsH,KAAMhE,EAAUiE,cAAcvH,GAC9BwH,KAAMA,IAAM,MAGPxH,CACT,IAEEyH,EAAQpE,EAAmBgB,WACS,aAAtChB,EAAmBqE,gBACrBD,GAASA,EAAME,aAEjBtE,EAAmBuE,aAAa3C,GAChC5B,EAAmBjD,WAAW7B,GAAW,CAAC,GAC1C,MAAMsJ,EAAY,IAAI9M,EAAOK,cAAc0M,SAASxE,GACpDuE,EAAUE,WAAWd,GACrB5D,EAAmB2E,aAAaH,GAChCxE,EAAmBW,OACfoB,GACFA,EAAqBpB,KAAKV,GAGxB+B,IACFhC,EAAmB2E,aAAa3C,GAChChC,EAAmBW,QAEjBkB,IACFxD,KAAKuG,gBAAgB,CAAE3E,YAAW4B,aAAYnK,WAC9CsI,EAAmB2E,aAAa1E,GAChCD,EAAmBW,SAEA,IAAjBxF,IAA2C,IAAlBF,GAC3BoD,KAAKyB,0BAA0BrI,EAAOsI,EAElC,EAMR,mBAA6BU,CAC3BR,EACAkB,IAGElB,EAAUQ,YAAYU,IACtBlB,EAAU+D,eAAe7C,GAO7B,uBAAiCnF,IAAC,cAChCiE,EAAS,WACT4B,EAAU,OACVnK,GACsBsE,EACtB,IAAK,IAAI6I,KAAahD,EACpB,OAAQgD,EAAUZ,MAChB,IAAK,cAKH,YAJqB,IAAIvM,EAAOK,cAAc+M,YAC5CD,EAAU3J,SAEC6J,OAAO9E,EAAW4E,EAAUzD,QAG3C,IAAK,YAKH,YAJqB,IAAI1J,EAAOK,cAAciN,UAC5CH,EAAU3J,SAEC6J,OAAO9E,EAAW4E,EAAUzD,QAG3C,IAAK,cAAe,CAClB,MAAM6D,EAAe,IAAIvN,EAAOK,cAAcmN,YAC5CL,EAAU3J,UAEN,OAAEiK,GAAWN,EACnB,GAAIM,EACF,IAAK,IAAIC,KAASD,EAChBF,EAAaI,YAAYD,GAI7B,YADAH,EAAaF,OAAO9E,EAAW4E,EAAUzD,OAE3C,CACA,IAAK,aAKH,YAJqB,IAAI1J,EAAOK,cAAcuN,WAC5CT,EAAU3J,SAEC6J,OAAO9E,EAAW4E,EAAUzD,QAG3C,IAAK,eAKH,YAJqB,IAAI1J,EAAOK,cAAcwN,aAC5CV,EAAU3J,SAEC6J,OAAO9E,EAAW4E,EAAUzD,QAG3C,IAAK,gBAKH,YAJqB,IAAI1J,EAAOK,cAAcyN,cAC5CX,EAAU3J,SAEC6J,OAAO9E,EAAW4E,EAAUzD,QAG3C,QAEE,YADA/G,QAAQoL,KAAK,2BAA2BZ,EAAUZ,QAIxD,EExPG,MCiBMyB,EAAwBjO,KACnCgC,EAAAA,EAAAA,YAAW,KACT,IAAKhC,EAAMuI,mBAAoB,OAE/B,MAAMX,EA7Bc5H,KACtB,MAAM,YAAEkO,EAAW,OAAEjO,EAAM,mBAAEsI,GAAuBvI,EACpD,GAAKkO,EAAL,CAGA,GAAK3F,EAIL,OAAO2F,EAAYxJ,KAAIH,I,IAAC,UAAEuB,EAAS,SAAED,GAAUtB,EAC7C,OAAOtE,EAAOK,cAAcyF,OAAOC,YACjCuC,EACAzC,GACA,WAAI,QAAAG,EAAAC,UAAA7B,OAAA8B,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAH,UAAAG,GACFR,EAAS,CACPS,aAAciC,EACdvI,QACAC,OAAQA,EACRuG,UAAWL,GAEf,OAdFvD,QAAQoL,KAAK,wDAFf,CAkBE,EAOkBG,CAAenO,GAEjC,MAAO,KACL4H,GAAWC,SAASC,IAClB9H,EAAMC,OAAOK,cAAcyF,OAAOgC,eAAeD,EAAA,GACjD,CACH,GACA,CAAC9H,GAAO,EC/BAoO,EAAgCpO,IAC3C,MAAOuI,EAAoB8F,GACzB9G,EAAAA,SAA0C,OAErC+C,EAAsBgE,GAC3B/G,EAAAA,SAA4C,OAExC,YAAES,EAAW,cAAEC,GAAkBZ,EAAiB,IACnDrH,EACHiH,eAAgBqD,EAChBhE,aAAciC,IAEhB0F,EAAqB,IAChBjO,EACHuI,uBAEF,MAAM,QAAEgG,GC5BRvO,KAEA,MAAMwO,EAAajH,EAAAA,OAA4B,MAc/C,MAAO,CAAEgH,QAbUE,MACjB,MAAM,QAAEC,EAAO,SAAEC,GAAa3O,EAE9B,IAAI4O,EAOJ,OALEA,EAHuBF,GAAWC,GAKjBH,EAAWK,SAAW9J,IAEzCyJ,EAAWK,QAAUD,EACdJ,EAAWK,OAAO,EAEXJ,GACE,EDYEK,CAAW9O,GACzB+O,EAAexH,EAAAA,OAA6B,MAC5CyH,EAAazH,EAAAA,OAA6B,MAEhDA,EAAAA,WAAgB,KACd,MAAM,QACJ9D,EAAO,OACPxD,EAAM,UACNkK,EAAS,mBACTnG,EAAkB,aAClB7D,EAAY,eACZC,EAAc,gBACduD,EAAe,OACf5B,GACE/B,EAEEiP,EAAc,CAClB9E,YACA1G,UACAsD,YAAawH,KACVvK,GAGCsC,EAAe,IAAIrG,EAAOK,cAAcC,aAAa0O,GAC3D3I,EAAahB,WAAW7B,GAAW,CAAC,GACpCE,IAAkB2C,EAAcrG,GAGhC,MAAMgH,EAAiB,IAAIhH,EAAOK,cAAcE,UAC9CuO,EAAaF,SAIX1O,GACFF,EAAOK,cAAcI,YACnBsO,EAAWH,QACX1O,GAKJ,IAAI+O,EAAwC,KACxC9O,IACF8O,EAAc,IAAIjP,EAAOK,cAAcG,YACvCL,EAAe,CACb8O,cACA5I,eACArG,YAIJ+H,EAAY,IAAKhI,EAAOiH,iBAAgBX,iBACxC+H,EAAsB/H,GACtBgI,EAAwBrH,GACxBlF,IAAS9B,EAAQ,CACfA,SACAqG,eACA4I,cACAjI,kBACA,GACD,IFxEHjH,KAEA,MAAM,OAAEC,EAAM,mBAAEsI,EAAkB,qBAAE+B,GAAyBtK,GACtDsI,EAAee,GAAoB9B,EAAAA,SAAyB,IAEnEA,EAAAA,WAAgB,KACTgB,GAGLH,EAAoBc,KAAK,IACpBlJ,EACHsI,gBACAC,qBACA+B,uBACArK,UACA,GACD,CACDqI,EACAtI,EAAM+J,KACN/J,EAAMiK,KACNjK,EAAMkK,QACNlK,EAAMyD,QACNzD,EAAMgD,qBACNhD,EAAMmK,UACNnK,EAAMoK,WACNpK,EAAMqK,eACNrK,EAAM4D,2BACN5D,EAAM0D,aACN1D,EAAMwD,gBAIR,MAAM2L,EAAWA,KACf,MAAM,mBAAE5G,GAAuBvI,EAC1BuI,GAGLA,EAAmBW,MAAM,EAIrBkG,EAAc7G,IAClB,MAAMX,EAAsC,IAEtC,aAAElE,EAAY,cAAEF,GAAkBxD,EASxC,GARAoI,EAAoBc,KAAK,IACpBlJ,EACHsI,gBACAC,qBACA+B,uBACArK,WAEFgD,OAAOR,iBAAiB,SAAU0M,GAC9B3L,GAAiBE,EAAc,CACjC,MAAMoE,EAAWM,EAAoBe,qBAAqBnJ,EAAO,CAC/DsI,EACAe,IAGEvB,GAAUF,EAAUyH,KAAKvH,EAC/B,CAEA,OAAOF,CAAA,EAIH0H,EAAUA,CACd/G,EACAX,KAEA3E,OAAOsM,oBAAoB,SAAUJ,GACrCvH,EAAUC,SAASC,IACjB7H,EAAOK,cAAcyF,OAAOgC,eAAeD,EAAA,IAEH,aAAtCS,EAAmBqE,gBACrBrE,EAAmBgB,YACjBhB,EAAmBgB,WAAWsD,YAClC,EAGFtF,EAAAA,WAAgB,KACd,IAAKgB,EACH,OAEF,MAAMX,EAAYwH,EAAW7G,GAC7B,MAAO,KACL+G,EAAQ/G,EAAoBX,EAAA,CAC7B,GACA,CAACW,EAAoB6G,EAAYE,GAAS,EEd7CE,CAAwB,IACnBxP,EACHuI,qBACA+B,yBAEF,MAAMmF,EAAcA,KAClB,MAAM,MAAEC,EAAK,OAAEC,EAAM,QAAElM,EAAO,MAAEmM,EAAK,UAAEC,EAAS,UAAE9L,EAAS,OAAE9D,GAC3DD,EAEI8P,EAAW,CACfH,OAAQA,GAAWlM,GAAWA,EAAQkM,OACtCD,MAAOA,GAAUjM,GAAWA,EAAQiM,SACjCE,GAEL,OACErI,EAAAA,cAAC,OAAI1C,GAAI0J,EAASqB,MAAOE,EAAUD,UAAWA,KAAe9L,G,EAI3DgM,EAAgBA,IACf/P,EAAMG,aACJoH,EAAAA,cAAC,OAAIyI,IAAKhB,IADe,MAI5B,MAAEU,EAAK,OAAEC,EAAM,QAAElM,EAAO,MAAEmM,GAAU5P,EAEpC8P,EAAW,CACfH,OAAQA,GAAWlM,GAAWA,EAAQkM,OACtCD,MAAOA,GAAUjM,GAAWA,EAAQiM,SACjCE,GAIL,OAAI5P,EAAMiQ,OAEN1I,EAAAA,cAAC,OAAIyI,IAAKjB,EAAca,MAAOE,GAC7BvI,EAAAA,cAAC,OAAIyI,IAAKhB,EAAYnK,GAAG,YACxB7E,EAAMiQ,OAAO,CACZR,cACAxH,gBACAiI,cAAeH,KAMnBxI,EAAAA,cAAC,OAAIyI,IAAKjB,EAAca,MAAOE,GAC5B7H,GACC1D,IAAC,gBAAEC,GAAaD,EAAK,MAAgC,WAAhCC,EAAY2L,eAA4B,IAE9DV,IACAxH,GACC1D,IAAC,gBAAEC,GAAaD,EAAK,MAAgC,WAAhCC,EAAY2L,eAA4B,IAE9DJ,IAGP,EEpJWK,EAAe7I,EAAAA,cAAoBhE,GAEnC8M,EAAkB9L,I,IAAC,SAC9B+L,EAAQ,MACRC,GAIDhM,EACC,OACEgD,EAAAA,cAAC6I,EAAaI,SAAQ,CAACD,MAAOA,GAAQD,EAAA,ECJpCG,EAA8CzQ,IAClD,MAAM,OAAEC,EAAM,UAAEsB,EAAS,MAAEC,GAAUb,EAAoBX,GACzD,OAAIuB,EACKvB,EAAM0Q,QAAU,KAErBlP,EACKxB,EAAM2Q,cAAgB,KAE3B1Q,EACKqE,EAAAA,cAAC8J,EAAA,CAAYnO,OAAQA,KAAYD,IAEnC,IAAI,EAMA4Q,EAA0CC,IACrD,MAAM7Q,EAAQ,IAAKuD,KAAsBsN,GACzC,OACEvM,EAAAA,cAAC+L,EAAA,CAAgBE,MAAOvQ,GACtBsE,EAAAA,cAACmM,EAAczQ,GAAA,E,OCmPT,SAAA8Q,G,sMAAA,CAAAA,IAAAA,EAAA,I","sources":["../node_modules/react-google-charts/src/hooks/useLoadGoogleCharts.ts","../node_modules/react-google-charts/src/hooks/useLoadScript.ts","../node_modules/react-google-charts/src/default-props.ts","../node_modules/react-google-charts/src/components/GoogleChartControls.tsx","../node_modules/react-google-charts/src/generate-unique-id.ts","../node_modules/react-google-charts/src/utils/GoogleChartControlsInternal.ts","../node_modules/react-google-charts/src/hooks/internal/useGoogleChartControls.tsx","../node_modules/react-google-charts/src/constants.ts","../node_modules/react-google-charts/src/utils/GoogleChartInternal.ts","../node_modules/react-google-charts/src/load-data-table-from-spreadsheet.ts","../node_modules/react-google-charts/src/hooks/internal/useGoogleChartDataTable.ts","../node_modules/react-google-charts/src/hooks/internal/useGoogleChartEvents.ts","../node_modules/react-google-charts/src/components/GoogleChart.tsx","../node_modules/react-google-charts/src/hooks/internal/useChartId.ts","../node_modules/react-google-charts/src/Context.tsx","../node_modules/react-google-charts/src/Chart.tsx","../node_modules/react-google-charts/src/types.ts"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport {\n  GoogleChartVersion,\n  GoogleChartPackages,\n  GoogleViz,\n  ReactGoogleChartProps,\n} from \"../types\";\nimport { useLoadScript } from \"./useLoadScript\";\n\nexport interface IUseLoadGoogleChartsParams {\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n}\n\nconst isGoogleReady = (google?: GoogleViz) => {\n  return google && google.charts;\n};\n\nconst isGoogleChartsReady = (\n  props: ReactGoogleChartProps,\n  google?: GoogleViz,\n) => {\n  const { controls, toolbarItems, getChartEditor } = props;\n  return (\n    google &&\n    google.charts &&\n    google.visualization &&\n    google.visualization.ChartWrapper &&\n    google.visualization.Dashboard &&\n    (!controls || google.visualization.ChartWrapper) &&\n    (!getChartEditor || google.visualization.ChartEditor) &&\n    (!toolbarItems || google.visualization.drawToolbar)\n  );\n};\n\nconst getGoogleInstanceFromWindow = (props: ReactGoogleChartProps) => {\n  // @ts-expect-error Getting object from global namespace.\n  const google = window.google as GoogleViz;\n  return google;\n};\n\n/**\n * Hook to load Google Charts JS API.\n * @param params - Load parameters.\n * @param [params.chartVersion] - Chart version to load.\n * @param [params.chartPackages] - Packages to load.\n * @param [params.chartLanguage] - Languages to load.\n * @param [params.mapsApiKey] - Google Maps api key.\n * @returns\n */\nexport function useLoadGoogleCharts(props: ReactGoogleChartProps) {\n  const {\n    chartVersion = \"current\",\n    chartPackages = [\"corechart\", \"controls\"],\n    chartLanguage = \"en\",\n    mapsApiKey,\n  } = props;\n  const [googleCharts, setGoogleCharts] = useState<GoogleViz | null>(null);\n  const [scriptInitializationError, setScriptInitializationError] =\n    useState<Error | null>(null);\n  const [googleChartsInitializationError, setGoogleChartsInitializationError] =\n    useState<Error | null>(null);\n  const {\n    isLoading,\n    error: scriptLoadingError,\n    isSuccess,\n  } = useLoadScript(\n    props.chartLoaderScriptUrl || \"https://www.gstatic.com/charts/loader.js\",\n  );\n\n  useEffect(() => {\n    if (!isSuccess) {\n      return;\n    }\n    const google = getGoogleInstanceFromWindow(props);\n    if (!isGoogleReady(google)) {\n      const error = new Error(\n        \"[ScriptInitializationError] Script loaded but Google not attached to window.\",\n      );\n      setScriptInitializationError(error);\n      return;\n    }\n    if (isGoogleChartsReady(props, google)) {\n      setGoogleCharts(google);\n      return;\n    }\n    google.charts.load(chartVersion, {\n      packages: chartPackages,\n      language: chartLanguage,\n      mapsApiKey,\n    });\n    google.charts.setOnLoadCallback(() => {\n      if (!isGoogleChartsReady(props, google)) {\n        const error = new Error(\n          \"[GoogleChartsInitializationError] Google Charts not ready after load callback.\",\n        );\n        console.error(error);\n        setGoogleChartsInitializationError(error);\n        return;\n      }\n      setGoogleCharts(google);\n    });\n  }, [isSuccess]);\n  return {\n    error:\n      scriptLoadingError ||\n      scriptInitializationError ||\n      googleChartsInitializationError,\n    isLoading,\n    google: googleCharts,\n  };\n}\n\nexport interface ILoadGoogleChartsProps extends IUseLoadGoogleChartsParams {\n  onLoad?(googleCharts: GoogleViz): void;\n  onError?(): void;\n}\n","import { useEffect, useState } from \"react\";\n\n/**\n * Hook to load external script.\n * @param src - Source url to load.\n * @param onLoad - Success callback.\n * @param onError - Error callback.\n */\nexport function useLoadScript(src: string) {\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n  const [isSuccess, setIsSuccess] = useState(false);\n  const onLoad = () => {\n    setIsLoading(false);\n    setIsSuccess(true);\n  };\n  useEffect(() => {\n    if (!document) {\n      const error = new Error(\n        `[ScriptLoadingError] document not defined when attempting to load ${src}`,\n      );\n      setError(error);\n      return;\n    }\n\n    // Find script tag with same src in DOM.\n    const foundScript = document.querySelector<HTMLScriptElement>(\n      `script[src=\"${src}\"]`,\n    );\n\n    // Call onLoad if script marked as loaded.\n    if (foundScript?.dataset.loaded) {\n      onLoad();\n      return;\n    }\n\n    // Create or get existed tag.\n    const script = foundScript || document.createElement(\"script\");\n\n    // Set src if no script was found.\n    if (!foundScript) {\n      script.src = src;\n    }\n\n    // Mark script as loaded on load event.\n    const onLoadWithMarker = () => {\n      script.dataset.loaded = \"1\";\n      onLoad();\n    };\n\n    script.addEventListener(\"load\", onLoadWithMarker);\n\n    script.addEventListener(\"error\", (err) => {\n      console.error(\"Failed to load script:\", src, err);\n      const error = new Error(\n        `[ScriptLoadingError] Failed to load script: ${src}`,\n      );\n      setError(error);\n    });\n\n    // Add to DOM if not yet added.\n    if (!foundScript) {\n      document.head.append(script);\n    }\n  }, []);\n  return {\n    isLoading,\n    error,\n    isSuccess,\n  };\n}\n","import { ReactGoogleChartProps } from \"./types\";\n\nexport const chartDefaultProps: Partial<ReactGoogleChartProps> = {\n  // <DEPRECATED_PROPS>\n  legend_toggle: false,\n  // </DEPRECATED_PROPS>\n  options: {},\n  legendToggle: false,\n  getChartWrapper: () => {},\n  spreadSheetQueryParameters: {\n    headers: 1,\n    gid: 1,\n  },\n  rootProps: {},\n  chartWrapperParams: {},\n  chartLoaderScriptUrl: \"https://www.gstatic.com/charts/loader.js\",\n};\n","import React from \"react\";\nimport { GoogleChartControlAndProp } from \"../hooks/internal/useGoogleChartControls\";\n\nexport type FilterControl = (control: GoogleChartControlAndProp) => boolean;\n\ntype Props = {\n  isReady: boolean;\n  chartControls: GoogleChartControlAndProp[] | null;\n  filter?: FilterControl;\n};\nexport const GoogleChartControls = (props: Props) => {\n  const { isReady, chartControls, filter } = props;\n  if (!isReady || !chartControls || !chartControls?.length) {\n    return null;\n  }\n  return (\n    <>\n      {chartControls\n        .filter(({ controlProp, control }) => {\n          return filter ? filter({ control, controlProp }) : true;\n        })\n        .map(({ control }) => {\n          return (\n            <div key={control.getContainerId()} id={control.getContainerId()} />\n          );\n        })}\n    </>\n  );\n};\n","let uniqueID = 0;\nexport const generateUniqueID = () => {\n  uniqueID += 1;\n  return `reactgooglegraph-${uniqueID}`;\n};\n","import {\n  GoogleViz,\n  ReactGoogleChartProps,\n  GoogleChartControlProp,\n  GoogleChartControl,\n  UseChartControlsParams,\n} from \"../types\";\nimport { generateUniqueID } from \"../generate-unique-id\";\n\nexport type Props = ReactGoogleChartProps & {\n  google: GoogleViz;\n};\n\nexport type GoogleChartControlAndProp = {\n  controlProp: GoogleChartControlProp;\n  control: GoogleChartControl;\n};\n\n/**\n * An internal helper class for creating and managing Google Charts controls.\n * Offers high-level methods to interact with the Google Chart Controls.\n */\nexport class GoogleChartControlsInternal {\n  /**\n   * Initialize the controls once chart is ready\n   */\n  private static initializeControls = (\n    googleChartControls: GoogleChartControlAndProp[],\n  ) => {\n    for (let i = 0; i < googleChartControls.length; i += 1) {\n      const { controlType, options, controlWrapperParams } =\n        googleChartControls[i].controlProp;\n      if (controlWrapperParams && \"state\" in controlWrapperParams) {\n        googleChartControls[i].control.setState(controlWrapperParams[\"state\"]);\n      }\n      googleChartControls[i].control.setOptions(options);\n      googleChartControls[i].control.setControlType(controlType);\n    }\n  };\n\n  /**\n   * listen to the control events (ready, statechange, error) specified in the controlEvents prop\n   */\n  public static listenToControlEvents = (\n    googleChartControls: GoogleChartControlAndProp[],\n    props: UseChartControlsParams,\n  ) => {\n    const { google } = props;\n    return googleChartControls.flatMap((chartControl) => {\n      const { control, controlProp } = chartControl;\n      const { controlEvents = [] } = controlProp;\n      return controlEvents.map((event) => {\n        const { callback, eventName } = event;\n        return google.visualization.events.addListener(\n          control,\n          eventName,\n          (...args) => {\n            callback({\n              chartWrapper: null,\n              controlWrapper: control,\n              props: props,\n              google: google,\n              eventArgs: args,\n            });\n          },\n        );\n      });\n    });\n  };\n\n  /**\n   * If controlID is not provided, generate a unique controlID\n   */\n  private static createControlId = (id: undefined | string) => {\n    let controlID: string;\n    if (typeof id === \"undefined\") {\n      controlID = `googlechart-control-${generateUniqueID()}`;\n    } else {\n      controlID = id;\n    }\n    return controlID;\n  };\n\n  /**\n   * Map the control props to Google Chart Controls\n   */\n  private static createChartControls = (props: UseChartControlsParams) => {\n    const { controls, google } = props;\n    if (!controls) {\n      return null;\n    }\n\n    return controls.map((control, i) => {\n      const {\n        controlID: controlIDMaybe,\n        controlType,\n        options: controlOptions,\n        controlWrapperParams,\n      } = control;\n      const controlID = this.createControlId(controlIDMaybe);\n      return {\n        controlProp: control,\n        control: new google.visualization.ControlWrapper({\n          containerId: controlID,\n          controlType,\n          options: controlOptions,\n          ...controlWrapperParams,\n        }),\n      };\n    });\n  };\n\n  static addControls = (props: UseChartControlsParams) => {\n    const { chartWrapper, chartDashboard } = props;\n    const googleChartControls = this.createChartControls(props);\n    if (!googleChartControls || !chartDashboard || !chartWrapper) {\n      return null;\n    }\n    chartDashboard.bind(\n      googleChartControls.map(({ control }) => control),\n      chartWrapper,\n    );\n    this.initializeControls(googleChartControls);\n    return googleChartControls;\n  };\n}\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  ReactGoogleChartProps,\n  GoogleChartControlProp,\n  GoogleChartControl,\n  UseChartControlsParams,\n} from \"../../types\";\nimport {\n  FilterControl,\n  GoogleChartControls,\n} from \"../../components/GoogleChartControls\";\nimport { GoogleChartControlsInternal } from \"../../utils/GoogleChartControlsInternal\";\n\nconst useCreateChartControls = (\n  controls: ReactGoogleChartProps[\"controls\"],\n) => {\n  const [chartControls, setChartControls] = React.useState<\n    GoogleChartControl[] | null\n  >(null);\n\n  const controlAndProp = React.useMemo(() => {\n    if (!chartControls || !controls) return null;\n\n    return controls\n      .map((controlProp, i): GoogleChartControlAndProp | undefined => {\n        const control: GoogleChartControl | undefined = chartControls[i];\n        return control ? { controlProp, control } : undefined;\n      })\n      .flatMap((controlAndProp) => (controlAndProp ? [controlAndProp] : []));\n  }, [chartControls, controls]);\n\n  return [controlAndProp, setChartControls] as const;\n};\n\nconst useListenToControlEvents = (\n  chartControls: GoogleChartControlAndProp[],\n  props: UseChartControlsParams,\n) => {\n  React.useEffect(() => {\n    const listeners = GoogleChartControlsInternal.listenToControlEvents(\n      chartControls ?? [],\n      props,\n    );\n\n    return () => {\n      listeners.forEach((listener) => {\n        props.google.visualization.events.removeListener(listener);\n      });\n    };\n  }, [chartControls, props]);\n};\n\nexport type Props = ReactGoogleChartProps & {\n  google: GoogleViz;\n};\n\nexport type GoogleChartControlAndProp = {\n  controlProp: GoogleChartControlProp;\n  control: GoogleChartControl;\n};\n\nexport const useChartControls = (props: UseChartControlsParams) => {\n  const [chartControls, setChartControls] = useCreateChartControls(\n    props.controls,\n  );\n\n  useListenToControlEvents(chartControls ?? [], props);\n\n  /**\n   * Render the container divs for the controls\n   */\n  const renderControl = (filter: FilterControl) => {\n    const { chartWrapper, chartDashboard } = props;\n    return (\n      <GoogleChartControls\n        {...props}\n        isReady={Boolean(chartWrapper && chartDashboard)}\n        chartControls={chartControls}\n        filter={filter}\n      />\n    );\n  };\n\n  return {\n    addControls: (props: UseChartControlsParams) => {\n      const controls = GoogleChartControlsInternal.addControls(props);\n      setChartControls(controls?.map((control) => control.control) ?? null);\n    },\n    renderControl,\n  };\n};\n","export const DEFAULT_CHART_COLORS = [\n  \"#3366CC\",\n  \"#DC3912\",\n  \"#FF9900\",\n  \"#109618\",\n  \"#990099\",\n  \"#3B3EAC\",\n  \"#0099C6\",\n  \"#DD4477\",\n  \"#66AA00\",\n  \"#B82E2E\",\n  \"#316395\",\n  \"#994499\",\n  \"#22AA99\",\n  \"#AAAA11\",\n  \"#6633CC\",\n  \"#E67300\",\n  \"#8B0707\",\n  \"#329262\",\n  \"#5574A6\",\n  \"#3B3EAC\",\n];\n","import { DEFAULT_CHART_COLORS } from \"../constants\";\nimport { UseGoogleChartDataTableParams } from \"../hooks/internal/useGoogleChartDataTable\";\nimport { loadDataTableFromSpreadSheet } from \"../load-data-table-from-spreadsheet\";\nimport { ApplyFormattersParams, GoogleDataTable } from \"../types\";\n\nconst GRAY_COLOR = \"#CCCCCC\";\n\n/**\n * An internal helper class around the Google Chart API.\n * Offers high-level methods to interact with the Google Chart API.\n */\nexport class GoogleChartInternal {\n  private static grayOutHiddenColumnsLabel = (\n    props: UseGoogleChartDataTableParams,\n    hiddenColumns: string[],\n  ) => {\n    const { googleChartWrapper, options } = props;\n    if (!googleChartWrapper) {\n      console.error(\"googleChartWrapper is not defined\");\n      return;\n    }\n    const dataTable = googleChartWrapper.getDataTable();\n    if (!dataTable) return;\n    const columnCount = dataTable.getNumberOfColumns();\n    const hasAHiddenColumn = hiddenColumns.length > 0;\n    if (hasAHiddenColumn === false) return;\n    const colors = Array.from({ length: columnCount - 1 }).map(\n      (_dontcare, i) => {\n        const columnID = this.getColumnId(dataTable, i + 1);\n        if (hiddenColumns.includes(columnID)) {\n          return GRAY_COLOR;\n        } else if (options && options.colors) {\n          return options.colors[i];\n        } else {\n          return DEFAULT_CHART_COLORS[i];\n        }\n      },\n    );\n    googleChartWrapper.setOptions({\n      ...options,\n      colors,\n    });\n    googleChartWrapper.draw();\n  };\n  /**\n   * Listens to user clicking on the legend to toggle the visibility of a column.\n   * When a user clicks on a legend item, the column id is added to / removed from the hiddenColumns state.\n   */\n  public static listenToLegendToggle = (\n    props: UseGoogleChartDataTableParams,\n    hiddenColumnsState: [\n      string[],\n      React.Dispatch<React.SetStateAction<string[]>>,\n    ],\n  ) => {\n    const [hiddenColumns, setHiddenColumns] = hiddenColumnsState;\n    const { google, googleChartWrapper } = props;\n    if (!googleChartWrapper) {\n      console.error(\"googleChartWrapper is not defined\");\n      return;\n    }\n    return google.visualization.events.addListener(\n      googleChartWrapper,\n      \"select\",\n      () => {\n        const chart = googleChartWrapper.getChart();\n        const selection = chart.getSelection();\n        const dataTable = googleChartWrapper.getDataTable();\n        if (\n          selection.length === 0 ||\n          // We want to listen to when a whole row is selected. This is the case only when row === null\n          selection[0].row !== null ||\n          !dataTable\n        ) {\n          return;\n        }\n\n        const columnIndex = selection[0].column;\n        const columnID = this.getColumnId(dataTable, columnIndex);\n        // If the column is hidden remove it from state, otherwise add it\n        if (hiddenColumns?.includes(columnID)) {\n          setHiddenColumns((state) => [\n            ...state.filter((colID) => colID !== columnID),\n          ]);\n        } else {\n          setHiddenColumns((state) => [...state, columnID]);\n        }\n      },\n    );\n  };\n\n  /**\n   * (Re-)Draw a Google Chart with the given data, options, and chart type.\n   */\n  public static draw = async (\n    props: UseGoogleChartDataTableParams & { hiddenColumns: string[] },\n  ) => {\n    const {\n      data,\n      diffdata,\n      rows,\n      columns,\n      options,\n      chartType,\n      formatters,\n      spreadSheetUrl,\n      spreadSheetQueryParameters,\n      googleChartDashboard,\n      googleChartWrapper,\n      google,\n      hiddenColumns,\n      legendToggle,\n      legend_toggle,\n    } = props;\n    if (!googleChartWrapper) {\n      console.error(\"draw was called with googleChartWrapper = null\");\n      return;\n    }\n    let dataTable: GoogleDataTable;\n    let chartDiff = null;\n    if (diffdata) {\n      const oldData = google.visualization.arrayToDataTable(diffdata.old);\n      const newData = google.visualization.arrayToDataTable(diffdata.new);\n      chartDiff = google.visualization[chartType].prototype.computeDiff(\n        oldData,\n        newData,\n      );\n    }\n    if (data) {\n      if (data instanceof google.visualization.DataTable) {\n        dataTable = data;\n      } else if (Array.isArray(data)) {\n        dataTable = google.visualization.arrayToDataTable(data);\n      } else {\n        dataTable = new google.visualization.DataTable(data);\n      }\n    } else if (rows && columns) {\n      dataTable = google.visualization.arrayToDataTable([columns, ...rows]);\n    } else if (spreadSheetUrl) {\n      dataTable = (await loadDataTableFromSpreadSheet(\n        google,\n        spreadSheetUrl,\n        spreadSheetQueryParameters,\n      )) as GoogleDataTable;\n    } else {\n      dataTable = google.visualization.arrayToDataTable([]);\n    }\n    const columnCount = dataTable.getNumberOfColumns();\n\n    const viewColumns = Array(columnCount)\n      .fill(0)\n      .map((_c, i) => {\n        const columnID = this.getColumnId(dataTable, i);\n        if (hiddenColumns.includes(columnID)) {\n          return {\n            label: dataTable.getColumnLabel(i),\n            type: dataTable.getColumnType(i),\n            calc: () => null,\n          };\n        } else {\n          return i;\n        }\n      });\n    const chart = googleChartWrapper.getChart();\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      chart && chart.clearChart();\n    }\n    googleChartWrapper.setChartType(chartType);\n    googleChartWrapper.setOptions(options || {});\n    const viewTable = new google.visualization.DataView(dataTable);\n    viewTable.setColumns(viewColumns);\n    googleChartWrapper.setDataTable(viewTable);\n    googleChartWrapper.draw();\n    if (googleChartDashboard) {\n      googleChartDashboard.draw(dataTable);\n    }\n\n    if (chartDiff) {\n      googleChartWrapper.setDataTable(chartDiff);\n      googleChartWrapper.draw();\n    }\n    if (formatters) {\n      this.applyFormatters({ dataTable, formatters, google });\n      googleChartWrapper.setDataTable(dataTable);\n      googleChartWrapper.draw();\n    }\n    if (legendToggle === true || legend_toggle === true) {\n      this.grayOutHiddenColumnsLabel(props, hiddenColumns);\n    }\n    return;\n  };\n  /**\n   * Get the column ID of a column in a GoogleDataTable.\n   * If the column has an ID, return the ID, otherwise return the label.\n   */\n  private static getColumnId = (\n    dataTable: GoogleDataTable,\n    columnIndex: number,\n  ) => {\n    return (\n      dataTable.getColumnId(columnIndex) ||\n      dataTable.getColumnLabel(columnIndex)\n    );\n  };\n\n  /**\n   * Apply Chart Formatters passed under the formatters prop to the GoogleDataTable\n   */\n  private static applyFormatters = ({\n    dataTable,\n    formatters,\n    google,\n  }: ApplyFormattersParams) => {\n    for (let formatter of formatters) {\n      switch (formatter.type) {\n        case \"ArrowFormat\": {\n          const vizFormatter = new google.visualization.ArrowFormat(\n            formatter.options,\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          return;\n        }\n        case \"BarFormat\": {\n          const vizFormatter = new google.visualization.BarFormat(\n            formatter.options,\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          return;\n        }\n        case \"ColorFormat\": {\n          const vizFormatter = new google.visualization.ColorFormat(\n            formatter.options,\n          );\n          const { ranges } = formatter;\n          if (ranges) {\n            for (let range of ranges) {\n              vizFormatter.addRange(...range);\n            }\n          }\n          vizFormatter.format(dataTable, formatter.column);\n          return;\n        }\n        case \"DateFormat\": {\n          const vizFormatter = new google.visualization.DateFormat(\n            formatter.options,\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          return;\n        }\n        case \"NumberFormat\": {\n          const vizFormatter = new google.visualization.NumberFormat(\n            formatter.options,\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          return;\n        }\n        case \"PatternFormat\": {\n          const vizFormatter = new google.visualization.PatternFormat(\n            formatter.options,\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          return;\n        }\n        default: {\n          console.warn(`Unknown formatter type: ${formatter.type}`);\n          return;\n        }\n      }\n    }\n  };\n}\n","import { GoogleViz } from \"./types\";\n\nexport const loadDataTableFromSpreadSheet = async (\n  googleViz: GoogleViz,\n  spreadSheetUrl: string,\n  urlParams: {\n    headers?: number;\n    gid?: any;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  } = {},\n) => {\n  return new Promise((resolve, reject) => {\n    const headers = `${\n      urlParams.headers ? `headers=${urlParams.headers}` : `headers=0`\n    }`;\n    const queryString = `${\n      urlParams.query ? `&tq=${encodeURIComponent(urlParams.query)}` : ``\n    }`;\n    const gid = `${urlParams.gid ? `&gid=${urlParams.gid}` : \"\"}`;\n    const sheet = `${urlParams.sheet ? `&sheet=${urlParams.sheet}` : \"\"}`;\n    const access_token = `${\n      urlParams.access_token ? `&access_token=${urlParams.access_token}` : \"\"\n    }`;\n    const urlQueryString = `${headers}${gid}${sheet}${queryString}${access_token}`;\n    const urlToSpreadSheet = `${spreadSheetUrl}/gviz/tq?${urlQueryString}`; //&tq=${queryString}`;\n    const query = new googleViz.visualization.Query(urlToSpreadSheet);\n    query.send((response: any) => {\n      if (response.isError()) {\n        reject(\n          `Error in query:  ${response.getMessage()} ${response.getDetailedMessage()}`,\n        );\n      } else {\n        resolve(response.getDataTable());\n      }\n    });\n  });\n};\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  GoogleChartDashboard,\n  GoogleVizEventListener,\n} from \"../../types\";\nimport { GoogleChartInternal } from \"../../utils\";\n\nexport type ChartDrawArgs = {\n  data: ReactGoogleChartProps[\"data\"];\n};\n\nexport type UseGoogleChartDataTableParams = ReactGoogleChartProps & {\n  googleChartWrapper?: GoogleChartWrapper | null;\n  google: GoogleViz;\n  googleChartDashboard?: GoogleChartDashboard | null;\n};\n\nexport const useGoogleChartDataTable = (\n  props: UseGoogleChartDataTableParams,\n) => {\n  const { google, googleChartWrapper, googleChartDashboard } = props;\n  const [hiddenColumns, setHiddenColumns] = React.useState<string[]>([]);\n  // Re-draw the chart when hiddenColumns change\n  React.useEffect(() => {\n    if (!googleChartWrapper) {\n      return;\n    }\n    GoogleChartInternal.draw({\n      ...props,\n      hiddenColumns,\n      googleChartWrapper,\n      googleChartDashboard,\n      google,\n    });\n  }, [\n    hiddenColumns,\n    props.data,\n    props.rows,\n    props.columns,\n    props.options,\n    props.chartLoaderScriptUrl,\n    props.chartType,\n    props.formatters,\n    props.spreadSheetUrl,\n    props.spreadSheetQueryParameters,\n    props.legendToggle,\n    props.legend_toggle,\n  ]);\n\n  // Re-draw the chart when the window is resized\n  const onResize = () => {\n    const { googleChartWrapper } = props;\n    if (!googleChartWrapper) {\n      return;\n    }\n    googleChartWrapper.draw();\n  };\n\n  // Draw the chart when the google charts wrapper is ready and when the hiddenColumns change\n  const initialize = (googleChartWrapper: GoogleChartWrapper) => {\n    const listeners: GoogleVizEventListener[] = [];\n\n    const { legendToggle, legend_toggle } = props;\n    GoogleChartInternal.draw({\n      ...props,\n      hiddenColumns,\n      googleChartWrapper,\n      googleChartDashboard,\n      google,\n    });\n    window.addEventListener(\"resize\", onResize);\n    if (legend_toggle || legendToggle) {\n      const listener = GoogleChartInternal.listenToLegendToggle(props, [\n        hiddenColumns,\n        setHiddenColumns,\n      ]);\n\n      if (listener) listeners.push(listener);\n    }\n\n    return listeners;\n  };\n\n  // Remove event listeners and clear the chart when the component is unmounted\n  const destroy = (\n    googleChartWrapper: GoogleChartWrapper,\n    listeners: GoogleVizEventListener[],\n  ) => {\n    window.removeEventListener(\"resize\", onResize);\n    listeners.forEach((listener) => {\n      google.visualization.events.removeListener(listener);\n    });\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      googleChartWrapper.getChart() &&\n        googleChartWrapper.getChart().clearChart();\n    }\n  };\n\n  React.useEffect(() => {\n    if (!googleChartWrapper) {\n      return;\n    }\n    const listeners = initialize(googleChartWrapper);\n    return () => {\n      destroy(googleChartWrapper, listeners);\n    };\n  }, [googleChartWrapper, initialize, destroy]);\n};\n","import { useEffect } from \"react\";\nimport {\n  GoogleChartWrapper,\n  GoogleViz,\n  ReactGoogleChartProps,\n} from \"../../types\";\n\nexport type GoogleChartEventsParams = ReactGoogleChartProps & {\n  googleChartWrapper?: GoogleChartWrapper | null;\n  google: GoogleViz;\n};\n\nconst listenToEvents = (props: GoogleChartEventsParams) => {\n  const { chartEvents, google, googleChartWrapper } = props;\n  if (!chartEvents) {\n    return;\n  }\n  if (!googleChartWrapper) {\n    console.warn(\"listenToEvents was called before chart wrapper ready.\");\n    return;\n  }\n  return chartEvents.map(({ eventName, callback }) => {\n    return google.visualization.events.addListener(\n      googleChartWrapper,\n      eventName,\n      (...args) => {\n        callback({\n          chartWrapper: googleChartWrapper,\n          props,\n          google: google,\n          eventArgs: args,\n        });\n      },\n    );\n  });\n};\n\nexport const useGoogleChartEvents = (props: GoogleChartEventsParams) => {\n  useEffect(() => {\n    if (!props.googleChartWrapper) return;\n\n    const listeners = listenToEvents(props);\n\n    return () => {\n      listeners?.forEach((listener) => {\n        props.google.visualization.events.removeListener(listener);\n      });\n    };\n  }, [props]);\n};\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  GoogleChartDashboard,\n  GoogleChartEditor,\n} from \"../types\";\nimport { useChartControls } from \"../hooks/internal/useGoogleChartControls\";\nimport { useChartId } from \"../hooks/internal/useChartId\";\nimport { useGoogleChartDataTable } from \"../hooks/internal/useGoogleChartDataTable\";\nimport { useGoogleChartEvents } from \"../hooks/internal/useGoogleChartEvents\";\n\ntype Props = ReactGoogleChartProps & {\n  google: GoogleViz;\n};\n\nexport const GoogleChart: React.FC<Props> = (props) => {\n  const [googleChartWrapper, setGoogleChartWrapper] =\n    React.useState<GoogleChartWrapper | null>(null);\n  // const [isReady, setIsReady] = React.useState<boolean>(false);\n  const [googleChartDashboard, setGoogleChartDashboard] =\n    React.useState<GoogleChartDashboard | null>(null);\n\n  const { addControls, renderControl } = useChartControls({\n    ...props,\n    chartDashboard: googleChartDashboard,\n    chartWrapper: googleChartWrapper,\n  });\n  useGoogleChartEvents({\n    ...props,\n    googleChartWrapper,\n  });\n  const { chartId } = useChartId(props);\n  const dashboardRef = React.useRef<HTMLDivElement>(null);\n  const toolbarRef = React.useRef<HTMLDivElement>(null);\n\n  React.useEffect(() => {\n    const {\n      options,\n      google,\n      chartType,\n      chartWrapperParams,\n      toolbarItems,\n      getChartEditor,\n      getChartWrapper,\n      onLoad,\n    } = props;\n\n    const chartConfig = {\n      chartType,\n      options,\n      containerId: chartId,\n      ...chartWrapperParams,\n    };\n    // Create ChartWrapper instance, pass it to the user and store it in state\n    const chartWrapper = new google.visualization.ChartWrapper(chartConfig);\n    chartWrapper.setOptions(options || {});\n    getChartWrapper?.(chartWrapper, google);\n\n    // Create Dashboard instance, needed for controls\n    const chartDashboard = new google.visualization.Dashboard(\n      dashboardRef.current,\n    );\n\n    // Create toolbar if needed\n    if (toolbarItems) {\n      google.visualization.drawToolbar(\n        toolbarRef.current as HTMLDivElement,\n        toolbarItems,\n      );\n    }\n\n    // Create ChartEditor instance if needed and pass it to the user\n    let chartEditor: GoogleChartEditor | null = null;\n    if (getChartEditor) {\n      chartEditor = new google.visualization.ChartEditor();\n      getChartEditor({\n        chartEditor,\n        chartWrapper,\n        google,\n      });\n    }\n    // Create and add controls to the chart / dashboard\n    addControls({ ...props, chartDashboard, chartWrapper });\n    setGoogleChartWrapper(chartWrapper);\n    setGoogleChartDashboard(chartDashboard);\n    onLoad?.(google, {\n      google,\n      chartWrapper,\n      chartEditor,\n      chartDashboard,\n    });\n  }, []);\n\n  useGoogleChartDataTable({\n    ...props,\n    googleChartWrapper,\n    googleChartDashboard,\n  });\n  const renderChart = () => {\n    const { width, height, options, style, className, rootProps, google } =\n      props;\n\n    const divStyle = {\n      height: height || (options && options.height),\n      width: width || (options && options.width),\n      ...style,\n    };\n    return (\n      <div id={chartId} style={divStyle} className={className} {...rootProps} />\n    );\n  };\n\n  const renderToolBar = () => {\n    if (!props.toolbarItems) return null;\n    return <div ref={toolbarRef} />;\n  };\n\n  const { width, height, options, style } = props;\n\n  const divStyle = {\n    height: height || (options && options.height),\n    width: width || (options && options.width),\n    ...style,\n  };\n\n  // If render prop is provided, give the user full control over the rendering by passing renderChart, renderControl and renderToolbar functions\n  if (props.render) {\n    return (\n      <div ref={dashboardRef} style={divStyle}>\n        <div ref={toolbarRef} id=\"toolbar\" />\n        {props.render({\n          renderChart,\n          renderControl,\n          renderToolbar: renderToolBar,\n        })}\n      </div>\n    );\n  } else {\n    return (\n      <div ref={dashboardRef} style={divStyle}>\n        {renderControl(\n          ({ controlProp }) => controlProp.controlPosition !== \"bottom\",\n        )}\n        {renderChart()}\n        {renderControl(\n          ({ controlProp }) => controlProp.controlPosition === \"bottom\",\n        )}\n        {renderToolBar()}\n      </div>\n    );\n  }\n};\n\nexport default GoogleChart;\n","import * as React from \"react\";\nimport { ReactGoogleChartProps } from \"../../types\";\nimport { generateUniqueID } from \"../../generate-unique-id\";\n\nexport const useChartId = (\n  props: Pick<ReactGoogleChartProps, \"graphID\" | \"graph_id\">,\n) => {\n  const chartIdRef = React.useRef<string | null>(null);\n  const getChartId = (): string => {\n    const { graphID, graph_id } = props;\n    const chartIdFromProps = graphID || graph_id;\n    let currentChartId: string;\n    if (chartIdFromProps) {\n      currentChartId = chartIdFromProps as string;\n    } else {\n      currentChartId = chartIdRef.current || generateUniqueID();\n    }\n    chartIdRef.current = currentChartId;\n    return chartIdRef.current as string;\n  };\n  const chartId = getChartId();\n  return { chartId };\n};\n","import * as React from \"react\";\nimport { chartDefaultProps } from \"./default-props\";\nimport { ReactGoogleChartProps } from \"./types\";\n\nexport const ChartContext = React.createContext(chartDefaultProps);\n\nexport const ContextProvider = ({\n  children,\n  value,\n}: {\n  children: any;\n  value: ReactGoogleChartProps;\n}) => {\n  return (\n    <ChartContext.Provider value={value}>{children}</ChartContext.Provider>\n  );\n};\n","import React from \"react\";\nimport { ReactGoogleChartProps } from \"./types\";\nimport { useLoadGoogleCharts } from \"./hooks\";\nimport { chartDefaultProps } from \"./default-props\";\nimport { GoogleChart } from \"./components/GoogleChart\";\nimport { ContextProvider } from \"./Context\";\n\n/**\n * Loads Google Charts JS and renders the GoogleChart component.\n */\nconst ChartView: React.FC<ReactGoogleChartProps> = (props) => {\n  const { google, isLoading, error } = useLoadGoogleCharts(props);\n  if (isLoading) {\n    return props.loader ?? null;\n  }\n  if (error) {\n    return props.errorElement ?? null;\n  }\n  if (google) {\n    return <GoogleChart google={google} {...props} />;\n  }\n  return null;\n};\n\n/**\n * Updates the context with the props and renders ChartView.\n */\nexport const Chart: React.FC<ReactGoogleChartProps> = (userProps) => {\n  const props = { ...chartDefaultProps, ...userProps };\n  return (\n    <ContextProvider value={props}>\n      <ChartView {...props} />\n    </ContextProvider>\n  );\n};\n\nexport default Chart;\n","// Complete Google Charts Type Definition : https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/google.visualization/index.d.ts\n\nexport type GoogleVizDrawToolbar = (\n  toolbarContainer: HTMLDivElement,\n  components: GoogleChartToolbarItem[],\n) => any;\n\nexport type GoogleViz = {\n  charts: GoogleChartLoader;\n  visualization: {\n    ChartWrapper: GoogleChartWrapper;\n    ControlWrapper: GoogleChartControl;\n    ChartEditor: GoogleChartEditor;\n    DataTable: GoogleDataTable;\n    events: GoogleVizEvents;\n    arrayToDataTable: GoogleArrayToDataTable;\n    drawToolbar: GoogleVizDrawToolbar;\n    [otherKeys: string]: any;\n  };\n};\n\nexport type GoogleChartTicks = (number | Date)[];\n\nexport type GoogleChartEditor = {\n  new (): GoogleChartEditor;\n  openDialog: (\n    chartWrapper: GoogleChartWrapper,\n    chartEditorOptions?: {\n      dataSourceInput?: any;\n      [otherKeyMaybe: string]: any;\n    },\n  ) => null;\n  getChartWrapper: () => GoogleChartWrapper;\n  setChartWrapper: (chartWrapper: GoogleChartWrapper) => GoogleChartWrapper;\n  closeDialog: () => null;\n};\n\nexport type GoogleChartLoaderOptions = {\n  packages?: GoogleChartPackages[];\n  language?: string;\n  mapsApiKey?: string;\n};\nexport type GoogleChartLoader = {\n  load: (\n    version: GoogleChartVersion,\n    googleChartOptions: GoogleChartLoaderOptions,\n  ) => void;\n  setOnLoadCallback: (callback: () => void) => void;\n};\nexport interface ChartWrapperProps {\n  chartType: GoogleChartWrapperChartType;\n  containerId?: string;\n  options?: {\n    width?: number;\n    height?: number;\n    is3D?: boolean;\n    title?: string;\n    backgroundColor: string;\n  };\n  dataTable?: {};\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view?: any[] | {};\n  render?: (props: ChartWrapperProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (\n    props: ChartWrapperProps,\n    chartWrapper: GoogleChartWrapper,\n  ) => any;\n}\n\nexport type VizEventsProps = {\n  chartWrapper: GoogleChartWrapper;\n  onReady?: (chartWrapper: GoogleChartWrapper) => any;\n  onError?: (chartWrapper: GoogleChartWrapper) => any;\n  onSelect?: (selection: Array<{ row?: any; column?: any }>) => any;\n  render?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n};\n\n/*\n *\n * <GoogleChartsTypes>\n *\n */\n\n/*\n *\n * Reference + Docs:\n * https://developers.google.com/chart/interactive/docs/reference#constructor_3\n * https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\n *\n */\nexport type GoogleChartWrapperChartType =\n  | \"AnnotationChart\"\n  | \"AreaChart\"\n  | \"BarChart\"\n  | \"BubbleChart\"\n  | \"Calendar\"\n  | \"CandlestickChart\"\n  | \"ColumnChart\"\n  | \"ComboChart\"\n  | \"DiffChart\"\n  | \"DonutChart\"\n  | \"Gantt\"\n  | \"Gauge\"\n  | \"GeoChart\"\n  | \"Histogram\"\n  | \"LineChart\"\n  | \"Line\"\n  | \"Bar\"\n  | \"Map\"\n  | \"OrgChart\"\n  | \"PieChart\"\n  | \"Sankey\"\n  | \"ScatterChart\"\n  | \"Scatter\"\n  | \"SteppedAreaChart\"\n  | \"Table\"\n  | \"Timeline\"\n  | \"TreeMap\"\n  | \"WaterfallChart\"\n  | \"WordTree\";\n\n// https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\nexport interface ChartWrapperOptions {\n  chartType: string;\n  containerId: string;\n  options: Partial<{\n    width: number;\n    height: number;\n    is3D: boolean;\n    title: string;\n    backgroundColor:\n      | string\n      | { fill: string; stroke: string; strokeWidth: number };\n    hAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    vAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    legend: any;\n    colors: string[];\n    [otherOptionKey: string]: any;\n  }>;\n  dataTable?: GoogleDataTable;\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view: any[] | {};\n  [otherOptionKey: string]: any;\n}\n\nexport type GoogleChartAction = {\n  id: string;\n  text: string;\n  action: (chartWrapper: GoogleChartWrapper) => void;\n};\n\nexport type GoogleChartControlProp = {\n  controlType:\n    | \"CategoryFilter\"\n    | \"ChartRangeFilter\"\n    | \"DateRangeFilter\"\n    | \"NumberRangeFilter\"\n    | \"StringFilter\";\n  options: {};\n  controlWrapperParams?: {};\n  controlID?: string;\n  controlPosition?: \"top\" | \"bottom\";\n  controlEvents?: ReactGoogleChartEvent[];\n};\n\nexport type GoogleChartWrapper = {\n  new (chartWrapperOptions: Partial<ChartWrapperOptions>): GoogleChartWrapper;\n  draw: (chartArgs?: ChartWrapperProps) => any;\n  toJSON: () => string;\n  clone: () => GoogleChartWrapper;\n  getDataSourceUrl: () => string;\n  getDataTable: () => GoogleDataTable | null; // null if datasourceurl set or ref to DataTable\n  getChartType: () => GoogleChartWrapperChartType;\n  getChartName: () => string;\n  getChart: () => {\n    removeAction: (actionID: string) => void;\n    getSelection: () => { row?: any; column?: any }[];\n    setAction: (ChartAction: GoogleChartAction) => void;\n    getImageURI: () => void;\n    clearChart: () => void; // Clears the chart, and releases all of its allocated resources.\n  }; // ref to chart\n  getContainerId: () => string;\n  getQuery: () => string;\n  getRefreshInterval: () => number;\n  getOption: (key: string, opt_default_value?: any) => any; // returns opt_default_value if key not found\n  getOptions: () => {};\n  getSelection: () => { row?: any; column?: any }[];\n  getView: () => {} | any[]; // Same format as toJSON\n\n  setDataSourceUrl: (url: string) => void;\n  setDataTable: (table: any) => void;\n  setChartType: (chartType: GoogleChartWrapperChartType) => void;\n  setChartName: (name: string) => void; // Sets an arbitrary name for the chart. This is not shown anywhere on the chart, unless a custom chart is explicitly designed to use it.\n  setContainerId: (id: string) => void; // Sets the ID of the containing DOM element for the chart.\n  setQuery: (query_string: string) => void; // Sets a query string, if this chart queries a data source. You must also set the data source URL if specifying this value.\n  setRefreshInterval: (interval: number) => void; // Sets the refresh interval for this chart, if it queries a data source. You must also set a data source URL if specifying this value. Zero indicates no refresh.\n  setOption: (key: string, value: any) => void; // \tSets a single chart option value, where key is the option name and value is the value. To unset an option, pass in null for the value. Note that key may be a qualified name, such as 'vAxis.title'.\n  setOptions: (options_obj: Partial<ChartWrapperOptions[\"options\"]>) => void; //\n};\n\nexport type GoogleVizEventListener = {\n  key: Record<string, unknown>;\n};\n\nexport type GoogleVizEventName =\n  | \"ready\"\n  | \"error\"\n  | \"select\"\n  | \"animationfinish\"\n  | \"statechange\"\n  | \"ok\"\n  | \"cancel\"\n  | \"animationstart\";\n\nexport type GoogleVizEvents = {\n  addListener: (\n    chartWrapper: GoogleChartWrapper | GoogleChartControl | GoogleChartEditor,\n    name: GoogleVizEventName,\n    onEvent: (chartWrapper: GoogleChartWrapper) => any,\n  ) => GoogleVizEventListener;\n  removeListener: (eventListener: GoogleVizEventListener) => any;\n  removeAllListeners: (chartWrapper: GoogleChartWrapper) => any;\n};\n\nexport type GoogleChartPackages =\n  | \"corechart\"\n  | \"charteditor\"\n  | \"controls\"\n  | \"calendar\"\n  | \"gantt\"\n  | \"gauge\"\n  | \"geochart\"\n  | \"map\"\n  | \"orgchart\"\n  | \"sankey\"\n  | \"table\"\n  | \"timeline\"\n  | \"treemap\"\n  | \"wordtree\";\n\nexport type GoogleChartVersion = \"current\" | \"upcoming\" | string;\n\nexport type GoogleDataTableColumnType =\n  | \"string\"\n  | \"number\"\n  | \"boolean\"\n  | \"date\"\n  | \"datetime\"\n  | \"timeofday\";\n\n// export type GoogleDataTable = {\n//   addColumn: (type: GoogleDataTableColumnType) => number;\n// };\n\n// Reference https://developers.google.com/chart/interactive/docs/roles\nexport enum GoogleDataTableColumnRoleType {\n  annotation = \"annotation\",\n  annotationText = \"annotationText\",\n  certainty = \"certainty\",\n  emphasis = \"emphasis\",\n  interval = \"interval\",\n  scope = \"scope\",\n  style = \"style\",\n  tooltip = \"tooltip\",\n  domain = \"domain\",\n}\n\nexport type GoogleDataTableColumn =\n  | {\n      type: GoogleDataTableColumnType;\n      label?: string; //  A label for the column.\n      role?: GoogleDataTableColumnRoleType;\n      pattern?: string;\n      p?: {};\n      id?: string;\n    }\n  | string;\n\n// Ref : https://developers.google.com/chart/interactive/docs/reference#dataparam\n\nexport type GoogleDataTableCell =\n  | {\n      v?: any; // The cell value. Type should match DataTableColumn type field\n      f?: string; // A string version of the v value, formatted for display.\n      p?: {};\n    }\n  | string\n  | number\n  | boolean\n  | Date\n  | null;\n\nexport type GoogleDataTableRow = GoogleDataTableCell[];\n\nexport type GoogleDataTableJS = {\n  cols: GoogleDataTableColumn[];\n  rows: {\n    c: GoogleDataTableRow;\n  }[];\n  p?: {};\n};\n\n// Reference : https://developers.google.com/chart/interactive/docs/reference#DataTable\n\nexport type GoogleDataTableRowFilter = {\n  column: number;\n  value: any;\n  minValue?: any;\n  maxValue?: any;\n};\n\nexport type GoogleDataTableSortColumns =\n  | number\n  | {\n      column: number;\n      desc: boolean;\n    }\n  | number[]\n  | {\n      column: number;\n      desc: boolean;\n    }[];\n\nexport type GoogleDataTable = {\n  // https://developers.google.com/chart/interactive/docs/reference#dataparam\n  new (dataParam: any): GoogleDataTable;\n  addColumn: (column: GoogleDataTableColumn) => number;\n  addRow: (row?: GoogleDataTableRow) => number;\n  addRows: (rows?: GoogleDataTableRow[] | number[] | any[]) => number;\n  clone: () => GoogleDataTable;\n\n  getColumnId: (columnIndex: number) => string;\n  getColumnLabel: (columnIndex: number) => string;\n  getColumnPattern: (columnIndex: number) => string;\n  getColumnProperties: (columnIndex: number) => {};\n  getColumnProperty: (columnIndex: number, name: string) => any;\n  getColumnRange: (columnIndex: number) => {\n    min: number | null;\n    max: number | null;\n  };\n  getColumnRole: (columnIndex: number) => GoogleDataTableColumnRoleType;\n  getColumnType: (columnIndex: number) => GoogleDataTableColumnType;\n  getDistinctValues: (columnIndex: number) => any[];\n  getFilteredRows: (filters: GoogleDataTableRowFilter[]) => number[];\n  getFormattedValue: (rowIndex: number, columnIndex: number) => string;\n  getNumberOfColumns: () => number;\n  getNumberOfRows: () => number;\n  getProperties: (rowIndex: number, columnIndex: number) => {};\n  getProperty: (rowIndex: number, columnIndex: number, name: string) => any;\n  getRowProperties: (rowIndex: number) => {};\n  getRowProperty: (rowIndex: number, name: string) => any;\n  getSortedRows: (sortColumns: GoogleDataTableSortColumns) => number[];\n  getTableProperties: () => {};\n  getTableProperty: (name: string) => any;\n  getValue: (\n    rowIndex: number,\n    columnIndex: number,\n  ) => boolean | string | number | Date | number[] | null;\n  insertColumn: (\n    columnIndex: number,\n    type: GoogleDataTableColumnType,\n    label?: string,\n    id?: string,\n  ) => void;\n  insertRows: (\n    rowIndex: number,\n    numberOrArray: GoogleDataTableRow[] | number,\n  ) => void;\n  removeColumn: (columnIndex: number) => void;\n  removeColumns: (columnIndex: number, numberOfColumns: number) => void;\n  removeRow: (rowIndex: number) => void;\n  removeRows: (rowIndex: number, numberOfColumns: number) => void;\n  setCell: (\n    rowIndex: number,\n    columnIndex: number,\n    value?: any,\n    formattedValue?: string,\n    properties?: {},\n  ) => {};\n  setColumnLabel: (columnIndex: number, label: string) => void;\n  setColumnProperty: (columnIndex: number, name: string, value: any) => void;\n  setColumnProperties: (columnIndex: number, properties: {} | null) => void;\n  setFormattedValue: (\n    rowIndex: number,\n    columnIndex: number,\n    formattedValue: string,\n  ) => void;\n  setProperty: (\n    rowIndex: number,\n    columnIndex: number,\n    name: string,\n    value: any,\n  ) => void;\n  setProperties: (\n    rowIndex: number,\n    columnIndex: number,\n    properties: {} | null,\n  ) => void;\n\n  setRowProperty: (rowIndex: number, name: string, value: any) => void;\n  setRowProperties: (rowIndex: number, properties: {} | null) => void;\n  setTableProperties: (properties: {} | null) => void;\n  setValue: (rowIndex: number, columnIndex: number, value: boolean | string | number | Date | number[] | null) => void;\n  sort: (sortColumns: GoogleDataTableSortColumns) => void;\n  toJSON: () => string; // GoogleDataTableJS\n};\n\nexport type GoogleArrayToDataTable = (\n  data: any[][],\n  isFirstRowLabels?: boolean,\n) => GoogleDataTable;\n\nexport type GoogleChartOptions = {\n  width?: number;\n  height?: number;\n  is3D?: boolean;\n  backgroundColor: string;\n\n  title?: string;\n  hAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  vAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  bubble?: {};\n  pieHole?: number;\n  redColor?: string;\n  redFrom?: number;\n  redTo?: number;\n  yellowColor?: string;\n  yellowFrom?: number;\n  yellowTo?: number;\n  greenColor?: string;\n  greenFrom?: number;\n  greenTo?: number;\n  minorTicks?: number;\n  majorTicks?: string[];\n  legend?:\n    | string\n    | {\n        position?: string;\n        maxLines?: number;\n        [otherOptionKey: string]: any;\n      };\n  curveType?: string;\n  showTooltip?: boolean;\n  showInfoWindow?: boolean;\n  allowHtml?: boolean;\n  isStacked?: string | boolean;\n  minColor?: string;\n  midColor?: string;\n  maxColor?: string;\n  headerHeight?: number;\n  fontColor?: string;\n  showScale?: boolean;\n  bar?: { groupWidth?: string }; // Remove space between bars.\n  candlestick?: {\n    fallingColor?: { strokeWidth?: number; fill?: string }; // red\n    risingColor?: { strokeWidth?: number; fill?: string }; // green\n    [otherOptionKey: string]: any;\n  };\n  wordtree?: {\n    format?: string;\n    word?: string;\n    [otherOptionKey: string]: any;\n  };\n  [otherOptionKey: string]: any;\n};\n\n/*\n *\n * </GoogleChartsTypes>\n *\n */\n\nexport type WindowWithMaybeGoogle = Window & { google?: any };\n\nexport type ReactGoogleChartEvent = {\n  eventName: GoogleVizEventName;\n  callback: (eventCallbackArgs: {\n    chartWrapper: GoogleChartWrapper | null;\n    controlWrapper?: GoogleChartControl;\n    props: ReactGoogleChartProps;\n    google: GoogleViz;\n    eventArgs: any;\n  }) => void;\n};\n\nexport type GoogleChartToolbarItem = {\n  type: \"igoogle\" | \"html\" | \"csv\" | \"htmlcode\";\n  datasource: string;\n  gadget?: string;\n  userPrefs?: {\n    \"3d\": number;\n    [otherKeyMaybe: string]: any;\n  };\n};\n\nexport type GoogleChartFormatter = {\n  column: number | number[];\n  type:\n    | \"ArrowFormat\"\n    | \"BarFormat\"\n    | \"ColorFormat\"\n    | \"DateFormat\"\n    | \"NumberFormat\"\n    | \"PatternFormat\";\n  options?: {};\n  ranges?: [\n    // from\n    any,\n    // to\n    any,\n    // color\n    string,\n    // bgcolor\n    string,\n  ][];\n};\n\nexport type ReactGoogleChartProps = {\n  height?: string | number;\n  width?: string | number;\n  graphID?: string;\n  chartType: GoogleChartWrapperChartType;\n  diffdata?: {\n    old: any;\n    new: any;\n  };\n  options?: ChartWrapperOptions[\"options\"];\n  loader?: JSX.Element;\n  errorElement?: JSX.Element;\n  data?: any[] | {};\n  rows?: GoogleDataTableRow[];\n  columns?: GoogleDataTableColumn[];\n  chartActions?: GoogleChartAction[];\n  chartEvents?: ReactGoogleChartEvent[];\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n  graph_id?: string;\n  legendToggle?: boolean;\n  legend_toggle?: boolean;\n  onLoad?: (\n    google: GoogleViz,\n    paramsV2: {\n      google: GoogleViz;\n      chartWrapper: GoogleChartWrapper;\n      chartDashboard: GoogleChartDashboard;\n      chartEditor?: GoogleChartEditor | null;\n    },\n  ) => void;\n  getChartWrapper?: (\n    chartWrapper: GoogleChartWrapper,\n    google: GoogleViz,\n  ) => void;\n  getChartEditor?: (args: {\n    chartEditor: GoogleChartEditor;\n    chartWrapper: GoogleChartWrapper;\n    google: GoogleViz;\n  }) => void;\n  className?: string;\n  style?: React.CSSProperties;\n  formatters?: GoogleChartFormatter[];\n  spreadSheetUrl?: string;\n  spreadSheetQueryParameters?: {\n    headers: number;\n    gid?: number | string;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  };\n  rootProps?: any;\n  controls?: GoogleChartControlProp[];\n  render?: ReactGoogleChartDashboardRender;\n  //https://developers.google.com/chart/interactive/docs/gallery/toolbar#example_1\n  toolbarItems?: GoogleChartToolbarItem[];\n  toolbarID?: string;\n  chartWrapperParams?: any;\n  /**\n   * URL of the chart loader script. Defaults to https://www.gstatic.com/charts/loader.js\n   * Added to support loading from a different CDN in China to optimize performance\n   */\n  chartLoaderScriptUrl?: string;\n};\n\nexport type GoogleChartDashboard = {\n  draw: (data: GoogleDataTable) => void;\n  bind: (\n    controlWrapperOrWrappers: GoogleChartControl | GoogleChartControl[],\n    chartWrapper: GoogleChartWrapper,\n  ) => void;\n};\n\nexport type ReactGoogleChartDashboardRender = ({\n  renderControl,\n  renderChart,\n  renderToolbar,\n}: {\n  renderControl: (\n    filter: ({\n      control,\n      controlProp,\n    }: {\n      control: GoogleChartControl;\n      controlProp: GoogleChartControlProp;\n    }) => boolean,\n  ) => any;\n  renderChart: () => any;\n  renderToolbar: () => any;\n}) => any;\nexport type GoogleChartControlOptions = any;\nexport type GoogleChartControl = {\n  new (chartWrapperOptions: GoogleChartControlOptions): GoogleChartControl;\n  getContainerId: () => string;\n  getOptions: () => GoogleChartControlOptions;\n  getState: () => any;\n  setState: (state: any) => void;\n  setOptions: (options: GoogleChartControlOptions) => void;\n  setControlType: (controlType: string) => void;\n};\n\nexport type ReactGoogleChartState = {\n  loadingStatus: \"loading\" | \"errored\" | \"ready\";\n  google: null | GoogleViz;\n  // hiddenColumns: string[];\n};\n\nexport type ReactGoogleChartContext = {\n  data: ReactGoogleChartProps[\"data\"];\n  rows: ReactGoogleChartProps[\"rows\"] | null;\n  columns: ReactGoogleChartProps[\"columns\"] | null;\n  diffdata: ReactGoogleChartProps[\"diffdata\"] | null;\n  options: ReactGoogleChartProps[\"options\"] | null;\n  legend_toggle: ReactGoogleChartProps[\"legend_toggle\"] | null;\n  legendToggle: ReactGoogleChartProps[\"legendToggle\"] | null;\n  chartType: ReactGoogleChartProps[\"chartType\"] | null;\n  formatters: ReactGoogleChartProps[\"formatters\"] | null;\n  spreadSheetUrl: ReactGoogleChartProps[\"spreadSheetUrl\"] | null;\n  spreadSheetQueryParameters:\n    | ReactGoogleChartProps[\"spreadSheetQueryParameters\"]\n    | null;\n};\n\nexport interface ApplyFormattersParams {\n  dataTable: GoogleDataTable;\n  formatters: GoogleChartFormatter[];\n  google: GoogleViz;\n}\n\nexport type GoogleChartControlAndProp = {\n  controlProp: GoogleChartControlProp;\n  control: GoogleChartControl;\n};\n\nexport type UseChartControlsParams = ReactGoogleChartProps & {\n  google: GoogleViz;\n  chartWrapper: GoogleChartWrapper | null;\n  chartDashboard: GoogleChartDashboard | null;\n};\n"],"names":["isGoogleChartsReady","props","google","controls","toolbarItems","getChartEditor","charts","visualization","ChartWrapper","Dashboard","ChartEditor","drawToolbar","useLoadGoogleCharts","chartVersion","chartPackages","chartLanguage","mapsApiKey","googleCharts","setGoogleCharts","useState","scriptInitializationError","setScriptInitializationError","googleChartsInitializationError","setGoogleChartsInitializationError","isLoading","error","scriptLoadingError","isSuccess","src","setIsLoading","setError","setIsSuccess","onLoad","useEffect","document","Error","foundScript","querySelector","dataset","loaded","script","createElement","addEventListener","onLoadWithMarker","err","console","head","append","useLoadScript","chartLoaderScriptUrl","window","isGoogleReady","load","packages","language","setOnLoadCallback","chartDefaultProps","legend_toggle","options","legendToggle","getChartWrapper","spreadSheetQueryParameters","headers","gid","rootProps","chartWrapperParams","GoogleChartControls","isReady","chartControls","filter","length","React__default","param","controlProp","control","map","key","getContainerId","id","uniqueID","generateUniqueID","GoogleChartControlsInternal","googleChartControls","i","controlType","controlWrapperParams","setState","setOptions","setControlType","listenToControlEvents","flatMap","chartControl","controlEvents","event","callback","eventName","events","addListener","_len","arguments","args","Array","_key","chartWrapper","controlWrapper","eventArgs","controlID","controlIDMaybe","controlOptions","this","createControlId","ControlWrapper","containerId","static","chartDashboard","createChartControls","bind","initializeControls","useChartControls","setChartControls","React","undefined","controlAndProp","useCreateChartControls","useListenToControlEvents","listeners","forEach","listener","removeListener","addControls","renderControl","Boolean","DEFAULT_CHART_COLORS","GoogleChartInternal","grayOutHiddenColumnsLabel","hiddenColumns","googleChartWrapper","dataTable","getDataTable","columnCount","getNumberOfColumns","colors","from","_dontcare","columnID","getColumnId","includes","draw","listenToLegendToggle","hiddenColumnsState","setHiddenColumns","selection","getChart","getSelection","row","columnIndex","column","state","colID","async","data","diffdata","rows","columns","chartType","formatters","spreadSheetUrl","googleChartDashboard","chartDiff","oldData","arrayToDataTable","old","newData","new","prototype","computeDiff","DataTable","isArray","googleViz","urlParams","Promise","resolve","reject","queryString","query","encodeURIComponent","sheet","access_token","urlToSpreadSheet","Query","send","response","isError","getMessage","getDetailedMessage","loadDataTableFromSpreadSheet","viewColumns","fill","_c","label","getColumnLabel","type","getColumnType","calc","chart","getChartType","clearChart","setChartType","viewTable","DataView","setColumns","setDataTable","applyFormatters","formatter","ArrowFormat","format","BarFormat","vizFormatter","ColorFormat","ranges","range","addRange","DateFormat","NumberFormat","PatternFormat","warn","useGoogleChartEvents","chartEvents","listenToEvents","GoogleChart","setGoogleChartWrapper","setGoogleChartDashboard","chartId","chartIdRef","getChartId","graphID","graph_id","currentChartId","current","useChartId","dashboardRef","toolbarRef","chartConfig","chartEditor","onResize","initialize","push","destroy","removeEventListener","useGoogleChartDataTable","renderChart","width","height","style","className","divStyle","renderToolBar","ref","render","renderToolbar","controlPosition","ChartContext","ContextProvider","children","value","Provider","ChartView","loader","errorElement","Chart","userProps","GoogleDataTableColumnRoleType"],"sourceRoot":""}